(SIG
   (app List List -> List)
   (cons Nat List -> List)
   (dbl Nat -> Nat)
   (len List -> Nat)
   (+ Nat Nat -> Nat)
   (s Nat -> Nat)
   (nil  -> List)
   (0  -> Nat)
)
(RULES
   +(0,x) -> x
   +(s(x),y) -> s(+(x,y))
   dbl(0) -> 0
   dbl(s(x)) -> s(s(dbl(x)))
   len(nil) -> 0
   len(cons(x,xs)) -> s(len(xs))
   app(nil,ys) -> ys
   app(cons(x,xs),ys) -> cons(x,app(xs,ys))
)
(CONJECTURES
   len(app(xs,xs)) = dbl(len(xs))
)

